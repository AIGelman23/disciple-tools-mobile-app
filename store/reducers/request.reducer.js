import * as actions from '../actions/request.actions';

const initialState = {
  queue: [],
  currentAction: {},
};

export default function requestReducer(state = initialState, action) {
  let newState = {
    ...state,
    currentAction: {},
  };
  let queue = newState.queue.slice(0); // clone array before modifying it
  const actionToModify = action.payload;
  switch (action.type) {
    case actions.REQUEST:
      // Queue all requests
      if (Object.prototype.hasOwnProperty.call(action.payload, 'isConnected')) {
        // Map only POST requests
        // console.log("actionToModify", actionToModify);
        if (actionToModify.data.method === 'POST' && actionToModify.action.includes('SAVE')) {
          // Phone its in ONLINE mode
          const { isConnected } = actionToModify;
          delete actionToModify.isConnected;
          // console.log("isConnected", isConnected);
          let jsonBody = JSON.parse(actionToModify.data.body);
          // console.log("jsonBody", jsonBody);
          const jsonBodyId = jsonBody.ID;
          if (isConnected) {
            if (jsonBody.ID) {
              delete jsonBody.ID;
              actionToModify.data.body = JSON.stringify(jsonBody);
              if (Number.isNaN(parseFloat(jsonBody.ID))) {
                // ONLINE PUT (Autogenerated ID / New entity )
                // console.log("ONLINE PUT()")
                // If entity has ID, search it in queue and merge it (if exist)
                const requestIndex = queue.findIndex(request => (JSON.parse(request.data.body).ID === jsonBodyId));
                if (requestIndex > -1) {
                  actionToModify.data.body = JSON.stringify(jsonBody);
                  queue[requestIndex] = actionToModify;
                  // console.log("actionToModify", actionToModify);
                }
              }
            }
          } else if (jsonBodyId) {
            // OFFLINE PUT ( Numeric ID / Existing entity or Autogenerated ID / New entity ) search it in queue and merge it (if exist)
            // console.log("OFFLINE PUT()");
            // console.log("jsonBodyId", jsonBodyId);
            // console.log("queue", queue);
            // console.log("request", queue[1]);
            // console.log("request.data.body", queue[1].data.body);
            // console.log("request.data.body", JSON.parse(queue[1].data.body));
            const requestIndex = queue.findIndex((request) => {
              if (actionToModify.url === request.url) {
                const jsonParseBody = JSON.parse(request.data.body);
                if (jsonParseBody.ID) {
                  return (jsonParseBody.ID === jsonBodyId);
                }
                return false;
              }
              return false;
            });
              // console.log("requestIndex", requestIndex);
            if (requestIndex > -1) {
              let requestFromQueue = queue[requestIndex];
              // console.log("requestFromQueue", requestFromQueue);
              // console.log("actionToModify", actionToModify);
              requestFromQueue = {
                ...actionToModify,
              };
              requestFromQueue.data.body = JSON.stringify(jsonBody);
              queue[requestIndex] = requestFromQueue;
              // console.log("requestFromQueue", requestFromQueue);
              // console.log("queue", queue);
              newState = {
                ...newState,
                queue: [...queue],
                currentAction: requestFromQueue,
              };
              return newState;
            }
          } else {
            // OFFLINE POST (Add autogenerated ID)
            // console.log("OFFLINE POST()")
            /* eslint-disable */
              jsonBody = {
                ...jsonBody,
                ID: 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                  const r = Math.random() * 16 | 0;
                  const v = c === 'x' ? r : ((r && 0x3) | 0x8);
                  return v.toString(16);
                }),
              };
              /* eslint-enable */
            actionToModify.data.body = JSON.stringify(jsonBody);
            // console.log("actionToModify", actionToModify);
          }
        } else if (actionToModify.data.method === 'GET') {
          // filter out redundant GET requests
          queue = queue.filter(existing => existing.payload.url !== actionToModify.url);
        }
      }
      newState = {
        ...newState,
        queue: [...queue, actionToModify],
        currentAction: actionToModify,
      };
      // console.log('1.1 adding to queue...', actionToModify);
      return newState;
    case actions.RESPONSE:
      // loop through every item in local storage and filter out the successful request
      // console.log('1.2 removing of queue...', action);
      newState = {
        ...newState,
        queue: queue.filter(request => request === action.payload),
      };
      return newState;
    default:
      return newState;
  }
}
